# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C4rchU8zVGcsVVMm_TYpCsTlyWu_tIqN
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Configuración de la aplicación
st.title("Análisis de Datos y Modelos de Clasificación")
st.sidebar.title("Opciones")

# Subida de archivo
uploaded_file = st.sidebar.file_uploader("Sube un archivo CSV", type=["csv"])
if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    st.write("Vista de los datos:")
    st.write(data.head())

    # Visualización de datos
    if st.sidebar.checkbox("Mostrar información del dataset"):
        st.write("Descripción del dataset:")
        st.write(data.describe())

    if st.sidebar.checkbox("Mostrar gráficos de distribución"):
        st.write("Gráficos de Distribución de Variables:")
        for col in data.select_dtypes(include=['float64', 'int64']).columns:
            fig, ax = plt.subplots()
            sns.histplot(data[col], kde=True, ax=ax)
            st.pyplot(fig)

    # Separación de características y etiqueta
    target_column = st.sidebar.selectbox("Selecciona la columna objetivo", data.columns)
    if target_column:
        X = data.drop(columns=[target_column])
        y = data[target_column]

        # División de datos
        test_size = st.sidebar.slider("Tamaño del conjunto de prueba", 0.1, 0.5, 0.3)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)

        # Entrenamiento del modelo
        model = LogisticRegression(max_iter=1000)
        model.fit(X_train, y_train)

        # Evaluación del modelo
        st.write("Evaluación del Modelo:")
        y_pred = model.predict(X_test)
        st.write("Matriz de Confusión:")
        st.write(confusion_matrix(y_test, y_pred))

        st.write("Reporte de Clasificación:")
        st.write(classification_report(y_test, y_pred))

        st.write("Precisión del Modelo:")
        st.write(accuracy_score(y_test, y_pred))